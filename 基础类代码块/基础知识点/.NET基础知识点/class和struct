相同点，不同点
相同点：语法类似。

不同点：

class是引用类型，继承自System.Object类；struct是值类型，继承自System.ValueType类，因此不具多态性。但是注意，System.ValueType是个引用类型。
从职能观点来看，class表现为行为；而struct常用于存储数据。
class支持继承，可以继承自类和接口；而struct没有继承性，struct不能从class继承，也不能作为class的基类，但struct支持接口继承（记得吗，《第二回：对抽象编程：接口和抽象类》也做过讨论）
class可以声明无参构造函数，可以声明析构函数；而struct只能声明带参数构造函数，且不能声明析构函数。因此，struct没有自定义的默认无参构造函数，默认无参构造器只是简单地把所有值初始化为它们的0等价值
实例化时，class要使用new关键字；而struct可以不使用new关键字，如果不以new来实例化struct，则其所有的字段将处于未分配状态，直到所有字段完成初始化，否则引用未赋值的字段会导致编译错误。
class可以实抽象类（abstract），可以声明抽象函数；而struct为抽象，也不能声明抽象函数。
class可以声明protected成员、virtual成员、sealed成员和override成员；而struct不可以，但是值得注意的是，struct可以重载System.Object的3个虚方法，Equals()、ToString()和GetHashTable()。
class的对象复制分为浅拷贝和深拷贝（该主题我们在本系列以后的主题中将重点讲述，本文不作详述），必须经过特别的方法来完成复制；而struct创建的对象复制简单，可以直接以等号连接即可。
class实例由垃圾回收机制来保证内存的回收处理；而struct变量使用完后立即自动解除内存分配。
作为参数传递时，class变量是以按址方式传递；而struct变量是以按值方式传递的。
我们可以简单的理解，class是一个可以动的机器，有行为，有多态，有继承；而struct就是个零件箱，组合了不同结构的零件。其实，class和struct最本质的区别就在于class是引用类型，内存分配于托管堆；而struct是值类型，内存分配于线程的堆栈上。由此差异，导致了上述所有的不同点，所以只有深刻的理解内存分配的相关内容，才能更好的驾驭。本系列将再以后的内容中，将引用类型和值类型做以深入的比较和探讨，敬请关注。当然正如本文标题描述的一样，使用class基本可以替代struct的任何场合，class后来居上。虽然在某些方面struct有性能方面的优势，但是在面向对象编程里，基本是class横行的天下。

那么，有人不免会提出，既然class几乎可以完全替代struct来实现所有的功能，那么struct还有存在的必要吗？答案是，至少在以下情况下，鉴于性能上的考虑，我们应该考虑使用struct来代替class：

实现一个主要用于存储数据的结构时，可以考虑struct。
struct变量占有堆栈的空间，因此只适用于数据量相对小的场合。
结构数组具有更高的效率。
提供某些和非托管代码通信的兼容性。
所有这些是struct有一席之地的理由，当然也许还有其他的更多说法，只是我不知道罢了:-)


类是引用类型在堆上分配，类的实例进行赋值只是复制了引用，都指向同一段实际对象分配的内存
类有构造和析构函数
类可以继承和被继承
结构：
结构是值类型在栈上分配（虽然栈的访问速度比较堆要快，但栈的资源有限）
所有结构类型都隐式地继承自类System.ValueType
结构的赋值将分配产生一个新的对象也就是说对结构类型的变量进行赋值，将创建所赋的值的一个“副本”。
结构没有构造函数，但可以添加。结构没有析构函数
结构不可以继承自另一个结构或被继承，但和类一样可以继承自接口
结构的默认值的生成方式为：将所有值类型的域设置为它们的默认值，并将所有引用类型的域设置为null
结构的实例域声明不能包含变量初始值设定项
